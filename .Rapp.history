doc <- htmlParse(url)
xmlsize(doc)
xmlSize(doc)
xmlAttrs(doc)
tables <- getNodeSet(doc, "//table")
tables
doc <- htmlParse(url)
doc
tables <- getNodeSet(doc, "//table")
tables
table <- tables[[8]]
table
xmlValue(table)
table
names(table)
xmlSApply(table, xmlValue)
d <- xmlValue(table[3]);
table[[3]]
d <- xmlValue(table[[3]]);
d
(0.99*0.001)/(0.99*0.001+0.05*0.999)
0.99*0.001+0.05*0.999
0.99*0.001
(0.99*0.001)/(0.99*0.001+0.05*0.999)
1-0.0194
(0.999*0.05)/(0.99*0.001+0.05*0.999)
(0.01*0.001)/(0.01*0.001+0.95*0.999)
(0.01*0.98)/(0.01*0.98+0.98*0.02)
(0.01*0.001)/(0.01*0.001+0.95*0.999)
(0.99*0.00001)/(0.99*0.00001+0.05*0.99999)
install.packages(LearnBayes)
install.packages("LwarnBayes")
install.packages("LearnBayes")
library(LearnBayes)
a=59
b=43
interval.est=qbeta(c(.05,.95),a,b)
interval.est
Simulate 1000 draws from the beta(a, b) distribution#
#
sim.p=rbeta(1000,a,b)#
#
# Simulate 1000 draws from the posterior predictive distribution#
#
sim.y=rbinom(1000,10,sim.p)#
hist(sim.y, xlim=c(0,10), xlab="Predicted # of grads")
quantile(sim.p, c(0.025, 0.975))
beta()
qbeta(0.5, 3, 2)
theta <- c(0.1, 0.2, 0.3, 0.4, 0.5)
ptheta <- c(0.5, 0.2, 0.2, 0.05, 0.05)
joe <- data.frame(theta, ptheta)
joe
mjoe <- joe$theta*joe$ptheta
mjoe
mjoe <- sum(joe$theta*joe$ptheta)
mjoe
msam <- 3/5
msam
varjoe <- sqrt(4)
varjoe
varjoe <- sqrt(sum((joe$theta-mjoe)**2*joe$ptheta))
varjoe
varsam <- 3*2/((2+3)**2*(3+2+1))
varsam
715+230
11284+14454+643
26381/32540
0.05*0.999+0.99*0.001
0.99*0.001/0.05094
0.01*0.019/(0.01*0.001+0.95*0.999)
705+175+100+20
58.5*4
234*.2
120*12
0.125/0.625
1/16/(1/16+0.5)
library(ggplot2)
?qplot()
?ddply()
library(plyr)
?ddply()
library(LearnBayes)#
data = c(1, 2, 3, 2, 5.2, 6, 7, 8)#
log.posterior = function(mu, data) {#
  val = 0#
  sigma = 1#
  for (i in 1:length(data)) {#
    val = val + log(dt((data[i] - mu)/sigma, df=1)/sigma)#
  }#
  return(val)#
}
install(LearnBayes)
install.packages("LearnBayes")
Cancer mortality example.  Data are from Tsutakawa (1985) and consist of#
#  the number of men aged 45 - 64 years who were at risk of stomach cancer (n)#
#  and who actually died (y) in the largest twenty cities in Missouri.#
#  We first work in the original scale of the parameters and then consider a #
#  transformation of model parameters.#
#
library(LearnBayes)#
#
data(cancermortality)#
cancermortality#
#
mycontour(betabinexch0, c(0.0001, 0.003, 1, 20000), cancermortality, xlab="eta", ylab="K")#
#
mycontour(betabinexch, c(-8, -4.5, 3, 16.5), cancermortality, xlab="logit eta", ylab="log K")#
#
#  Normal approximation to the posterior distribution in the logit(eta)#
#  and log(k) scale.  We use the function laplace in LearnBayes.  Laplace#
#  uses optim with the default method Nelder-Meade.#
#
fit = laplace(betabinexch, c(-7,6), cancermortality)#
fit#
#
normal.par = list(m = fit$mode, v = fit$var)#
mycontour(lbinorm, c(-8, -4.5, 3, 16.5), normal.par, xlab="logit eta", ylab="log(K)")#
#
#  Now draw values of logit(eta) and of log(K) from the normal approximation.#
#  We will "throw" those values onto the contour plots of the real logpoterior#
#  to see how well they agree.#
#
mu = c(-6.82, 7.58)#
Sigma = matrix(c(0.07896, -0.14851, -0.14851, 1.34832), 2, 2)#
d = rmnorm(1000, mu, Sigma)#
#
mycontour(betabinexch, c(-8, -4.5, 3, 16.5), cancermortality, xlab="logit eta", ylab="log K")#
points(d)#
#
#  95% credible sets for the parameters using the normal approximation.#
#
se = sqrt(diag(fit$var))#
fit$mode - 1.96*se#
fit$mode + 1.96*se
data(cancermortality)
cancermortality
mycontour(betabinexch0, c(0.0001, 0.003, 1, 20000), cancermortality, xlab="eta", ylab="K")
mycontour(betabinexch, c(-8, -4.5, 3, 16.5), cancermortality, xlab="logit eta", ylab="log K")
fit = laplace(betabinexch, c(-7,6), cancermortality)
fit
normal.par = list(m = fit$mode, v = fit$var)
mycontour(lbinorm, c(-8, -4.5, 3, 16.5), normal.par, xlab="logit eta", ylab="log(K)")
mu = c(-6.82, 7.58)#
Sigma = matrix(c(0.07896, -0.14851, -0.14851, 1.34832), 2, 2)#
d = rmnorm(1000, mu, Sigma)
mycontour(betabinexch, c(-8, -4.5, 3, 16.5), cancermortality, xlab="logit eta", ylab="log K")#
points(d)
95% credible sets for the parameters using the normal approximation.#
#
se = sqrt(diag(fit$var))#
fit$mode - 1.96*se#
fit$mode + 1.96*se
?betabinexch()
?laplace()
3**16
26*25/2
A = matrix(c(3,4,2,16), by.row=T)
A = matrix(c(3,4,2,16), byrow=T)
A
A = matrix(c(3,4,2,16), rows=2)
?matrix()
A = matrix(c(3,4,2,16), nrow=2)
A
inverse(A)
inv(A)
solve(A)
t(A)
g <- read.csv("~/Desktop/GerminationTable.csv")
dim(g)
head(g)
names(g) <- c("Row", "G", "rate")
g <- read.csv("~/Desktop/GerminationTable.csv")
names(g) <- c("Row", "G", "rate")
head(g)
hist(g$rate)
hist(g$rate, main="Histogram of Germination Rate (100%)", xlab="GR", breaks=30)
gr <- read.table("~/Desktop/GerminationTable.csv")
head(gr)
gr <- read.csv("~/Desktop/GerminationTable.csv", header=T)
head(gr)
names(gr) <- c("row", "g", "rate")
head(gr)
gr
head(gr)
summary(gr$rate)
hist(gr$rate)
hist(gr$rate, main="Histogram of Germination Rate (100%)", xlab="gr")
hist(gr$rate, main="Histogram of Germination Rate (100%)", xlab="gr", breaks=30)
gs <- gr[rg$row %in% 7001:7200,]
gs <- gr[gr$row %in% 7001:7200,]
dim(gs)
head(gs)
tail(gs)
sum(gs$rate)
sum(gs$g)
q()
25＊24＊23＊22／30＊29＊28＊27
25*24*23*22/30*29*28*27
25*24*23*22/(30*29*28*27)
epcr <- read.table("~/Desktop/p2ePCR.txt", header=T)
head(epcr)
epcr$ID2 <- paste("SNP_ID", "R", sep="_")
head(epcr)
epcr <- epcr[, c(1:2,5,3:4)]
head(epcr)
epcr$ID2 <- paste(epcr$SNP_ID, "R", sep="_")
head(epcr)
write.table(epcr, "~/Desktop/p2ePCR.txt", sep="\t", row.names=FALSE, col.names=FALSE, quote=FALSE)
epcr$X2nd.PCRP <- gsub("ACGTTGGATG", "", epcr$X2nd.PCRP)
epcr$X1st.PCRP <- gsub("ACGTTGGATG", "", epcr$X1st.PCRP)
write.table(epcr, "~/Desktop/p2ePCR.txt", sep="\t", row.names=FALSE, col.names=FALSE, quote=FALSE)
dim(epcr)
write.table(epcr[1:100,], "~/Desktop/p2ePCR1.txt", sep="\t", row.names=FALSE, col.names=FALSE, quote=FALSE)
write.table(epcr[101:200,], "~/Desktop/p2ePCR2.txt", sep="\t", row.names=FALSE, col.names=FALSE, quote=FALSE)
write.table(epcr[201:300,], "~/Desktop/p2ePCR3.txt", sep="\t", row.names=FALSE, col.names=FALSE, quote=FALSE)
write.table(epcr[301:425,], "~/Desktop/p2ePCR4.txt", sep="\t", row.names=FALSE, col.names=FALSE, quote=FALSE)
write.table(epcr[301:375,], "~/Desktop/p2ePCR4.txt", sep="\t", row.names=FALSE, col.names=FALSE, quote=FALSE)
write.table(epcr[376:425,], "~/Desktop/p2ePCR5.txt", sep="\t", row.names=FALSE, col.names=FALSE, quote=FALSE)
write.table(epcr[301:350,], "~/Desktop/p2ePCR5.txt", sep="\t", row.names=FALSE, col.names=FALSE, quote=FALSE)
write.table(epcr[351:375,], "~/Desktop/p2ePCR5.txt", sep="\t", row.names=FALSE, col.names=FALSE, quote=FALSE)
write.table(epcr[301:325,], "~/Desktop/p2ePCR5.txt", sep="\t", row.names=FALSE, col.names=FALSE, quote=FALSE)
write.table(epcr[326:350,], "~/Desktop/p2ePCR5.txt", sep="\t", row.names=FALSE, col.names=FALSE, quote=FALSE)
write.table(epcr[301:310,], "~/Desktop/p2ePCR5.txt", sep="\t", row.names=FALSE, col.names=FALSE, quote=FALSE)
write.table(epcr[311:320,], "~/Desktop/p2ePCR5.txt", sep="\t", row.names=FALSE, col.names=FALSE, quote=FALSE)
write.table(epcr[311:315,], "~/Desktop/p2ePCR5.txt", sep="\t", row.names=FALSE, col.names=FALSE, quote=FALSE)
write.table(epcr[316:318,], "~/Desktop/p2ePCR5.txt", sep="\t", row.names=FALSE, col.names=FALSE, quote=FALSE)
write.table(epcr[319,], "~/Desktop/p2ePCR5.txt", sep="\t", row.names=FALSE, col.names=FALSE, quote=FALSE)
eprc[319,]
epcr[319,]
write.table(epcr[c(301:318,320:425),], "~/Desktop/p2ePCR4.txt", sep="\t", row.names=FALSE, col.names=FALSE, quote=FALSE)
test <- read.csv("~/Desktop/Workbook1.csv")
head(test)
table(test$position)
test <- read.csv("~/Desktop/p7barcode.csv")
dim(test)
head(test)
test <- read.csv("~/Desktop/p7barcode.csv")
head(test)
write.table(test, "~/Desktop/p7barcode1.csv", sep=",", row.names=FALSE, quote=FALSE)
salmon <- read.csv("~/Desktop/salmon.csv")#
#
t1 <- subset(salmon, trails==1)#
#
par(mfrow=c(2,2))#
plot(1:9, t1$GMO, ylab="Average Weight (g)", main="",xlab="days", type="o",#
     xaxt="n", col="red", ylim=c(50, 180))#
lines(1:9, t1$nonGMO, type="o", col="blue")     #
axis(1, at= c(1,2,3,4,5,6,7,8,9), labels= c(1,15,30, 45,60,75,90, 105, 120),#
 las=1, cex.axis=1)#
#
legend(1, g_range[2], c("cars","trucks"), cex=0.8, #
   col=c("blue","red"), pch=21:22, lty=1:2);
legend(10, 150, c("cars","trucks"), cex=0.8, #
   col=c("blue","red"), pch=21:22, lty=1:2);
legend("topleft", c("GMO","nonGM"), cex=0.8, #
   col=c("red","blue"), pch=21:22, lty=1:2);
par(mfrow=c(2,2))#
plot(1:9, t1$GMO, ylab="Average Weight (g)", main="Trail 1",xlab="days", type="o",#
     xaxt="n", col="red", ylim=c(50, 180))#
lines(1:9, t1$nonGMO, type="o", col="blue")     #
axis(1, at= c(1,2,3,4,5,6,7,8,9), labels= c(1,15,30, 45,60,75,90, 105, 120),#
 las=1, cex.axis=1)#
legend("topleft", c("GMO","nonGM"), cex=0.8, #
   col=c("red","blue"), pch=21, lty=1);
t2 <- subset(salmon, trails==2)
t3 <- subset(salmon, trails==3)
t1
t2
t3
mean(t1$GMO, t2$GMO, t3$GMO)
t2 <- subset(salmon, trails==2)#
t3 <- subset(salmon, trails==3)
plot(1:9, t2$GMO, ylab="Average Weight (g)", main="Trial 1",xlab="days", type="o",#
     xaxt="n", col="red", ylim=c(50, 180))#
lines(1:9, t1$nonGMO, type="o", col="blue")     #
axis(1, at= c(1,2,3,4,5,6,7,8,9), labels= c(1,15,30, 45,60,75,90, 105, 120),#
 las=1, cex.axis=1)#
legend("topleft", c("GMO","nonGM"), cex=0.8, #
   col=c("red","blue"), pch=21, lty=1);
plot(1:9, t3$GMO, ylab="Average Weight (g)", main="Trial 1",xlab="days", type="o",#
     xaxt="n", col="red", ylim=c(50, 180))#
lines(1:9, t1$nonGMO, type="o", col="blue")     #
axis(1, at= c(1,2,3,4,5,6,7,8,9), labels= c(1,15,30, 45,60,75,90, 105, 120),#
 las=1, cex.axis=1)#
legend("topleft", c("GMO","nonGM"), cex=0.8, #
   col=c("red","blue"), pch=21, lty=1);
salmon <- read.csv("~/Desktop/salmon.csv")#
#
t1 <- subset(salmon, trails==1)#
t2 <- subset(salmon, trails==2)#
t3 <- subset(salmon, trails==3)#
t4 <- subset(salmon, trails==4)#
####
par(mfrow=c(2,2))#
plot(1:9, t1$GMO, ylab="Average Weight (g)", main="Trial One",xlab="Days", type="o",#
     xaxt="n", col="red", ylim=c(50, 180))#
lines(1:9, t1$nonGMO, type="o", col="blue")     #
axis(1, at= c(1,2,3,4,5,6,7,8,9), labels= c(1,15,30, 45,60,75,90, 105, 120),#
 las=1, cex.axis=1)#
legend("topleft", c("GMO","nonGM"), cex=0.8, #
   col=c("red","blue"), pch=21, lty=1);#
#####
plot(1:9, t2$GMO, ylab="Average Weight (g)", main="Trial Two",xlab="Days", type="o",#
     xaxt="n", col="red", ylim=c(50, 180))#
lines(1:9, t1$nonGMO, type="o", col="blue")     #
axis(1, at= c(1,2,3,4,5,6,7,8,9), labels= c(1,15,30, 45,60,75,90, 105, 120),#
 las=1, cex.axis=1)#
legend("topleft", c("GMO","nonGM"), cex=0.8, #
   col=c("red","blue"), pch=21, lty=1);#
#####
plot(1:9, t3$GMO, ylab="Average Weight (g)", main="Trial Three",xlab="Days", type="o",#
     xaxt="n", col="red", ylim=c(50, 180))#
lines(1:9, t1$nonGMO, type="o", col="blue")     #
axis(1, at= c(1,2,3,4,5,6,7,8,9), labels= c(1,15,30, 45,60,75,90, 105, 120),#
 las=1, cex.axis=1)#
legend("topleft", c("GMO","nonGM"), cex=0.8, #
   col=c("red","blue"), pch=21, lty=1);#
#### Combination of Three trials#
plot(1:9, t4$GMO, ylab="Average Weight (g)", main="Combination of Three trials",xlab="Days", type="o",#
     xaxt="n", col="red", ylim=c(50, 180))#
lines(1:9, t1$nonGMO, type="o", col="blue")     #
axis(1, at= c(1,2,3,4,5,6,7,8,9), labels= c(1,15,30, 45,60,75,90, 105, 120),#
 las=1, cex.axis=1)#
legend("topleft", c("GMO","nonGM"), cex=0.8, #
   col=c("red","blue"), pch=21, lty=1);
salmon <- read.csv("~/Desktop/salmon.csv")#
#
t1 <- subset(salmon, trails==1)#
t2 <- subset(salmon, trails==2)#
t3 <- subset(salmon, trails==3)#
t4 <- subset(salmon, trails==4)#
####
par(mfrow=c(2,2))#
plot(1:9, t1$GMO, ylab="Average Weight (g)", main="Trial One",xlab="Days", type="o",#
     xaxt="n", col="red", ylim=c(50, 180))#
lines(1:9, t1$nonGMO, type="o", col="blue")     #
axis(1, at= c(1,2,3,4,5,6,7,8,9), labels= c(1,15,30, 45,60,75,90, 105, 120),#
 las=1, cex.axis=1)#
legend("topleft", c("GM","nonGM"), cex=0.8, #
   col=c("red","blue"), pch=21, lty=1);#
#####
plot(1:9, t2$GMO, ylab="Average Weight (g)", main="Trial Two",xlab="Days", type="o",#
     xaxt="n", col="red", ylim=c(50, 180))#
lines(1:9, t1$nonGMO, type="o", col="blue")     #
axis(1, at= c(1,2,3,4,5,6,7,8,9), labels= c(1,15,30, 45,60,75,90, 105, 120),#
 las=1, cex.axis=1)#
legend("topleft", c("GM","nonGM"), cex=0.8, #
   col=c("red","blue"), pch=21, lty=1);#
#####
plot(1:9, t3$GMO, ylab="Average Weight (g)", main="Trial Three",xlab="Days", type="o",#
     xaxt="n", col="red", ylim=c(50, 180))#
lines(1:9, t1$nonGMO, type="o", col="blue")     #
axis(1, at= c(1,2,3,4,5,6,7,8,9), labels= c(1,15,30, 45,60,75,90, 105, 120),#
 las=1, cex.axis=1)#
legend("topleft", c("GM","nonGM"), cex=0.8, #
   col=c("red","blue"), pch=21, lty=1);#
#### Combination of Three trials#
plot(1:9, t4$GMO, ylab="Average Weight (g)", main="Combination of Three trials",xlab="Days", type="o",#
     xaxt="n", col="red", ylim=c(50, 180))#
lines(1:9, t1$nonGMO, type="o", col="blue")     #
axis(1, at= c(1,2,3,4,5,6,7,8,9), labels= c(1,15,30, 45,60,75,90, 105, 120),#
 las=1, cex.axis=1)#
legend("topleft", c("GM","nonGM"), cex=0.8, #
   col=c("red","blue"), pch=21, lty=1);
par(mfrow=c(2,2))#
plot(1:9, t1$GMO, ylab="Average Weight (g)", main="Trial One",xlab="Days", type="o",#
     xaxt="n", col="red", ylim=c(50, 180))#
lines(1:9, t1$nonGMO, type="o", col="blue")     #
axis(1, at= c(1,2,3,4,5,6,7,8,9), labels= c(1,15,30, 45,60,75,90, 105, 120),#
 las=1, cex.axis=1)#
legend("topleft", c("GM","nonGM"), cex=0.8, #
   col=c("red","blue"), pch=21, lty=1);#
#####
plot(1:9, t2$GMO, ylab="Average Weight (g)", main="Trial Two",xlab="Days", type="o",#
     xaxt="n", col="red", ylim=c(50, 180))#
lines(1:9, t1$nonGMO, type="o", col="blue")     #
axis(1, at= c(1,2,3,4,5,6,7,8,9), labels= c(1,15,30, 45,60,75,90, 105, 120),#
 las=1, cex.axis=1)#
legend("topleft", c("GM","nonGM"), cex=0.8, #
   col=c("red","blue"), pch=21, lty=1);#
#####
plot(1:9, t3$GMO, ylab="Average Weight (g)", main="Trial Three",xlab="Days", type="o",#
     xaxt="n", col="red", ylim=c(50, 180))#
lines(1:9, t1$nonGMO, type="o", col="blue")     #
axis(1, at= c(1,2,3,4,5,6,7,8,9), labels= c(1,15,30, 45,60,75,90, 105, 120),#
 las=1, cex.axis=1)#
legend("topleft", c("GM","nonGM"), cex=0.8, #
   col=c("red","blue"), pch=21, lty=1);#
#### Combination of Three trials#
plot(1:9, t4$GMO, ylab="Average Weight (g)", main="Combination of trial two and three",xlab="Days", type="o",#
     xaxt="n", col="red", ylim=c(50, 180))#
lines(1:9, t1$nonGMO, type="o", col="blue")     #
axis(1, at= c(1,2,3,4,5,6,7,8,9), labels= c(1,15,30, 45,60,75,90, 105, 120),#
 las=1, cex.axis=1)#
legend("topleft", c("GM","nonGM"), cex=0.8, #
   col=c("red","blue"), pch=21, lty=1);
t4
13/161
reads <- read.table("~/Desktop/GS_head")
reads <- read.delim("~/Desktop/GS_head")
dim(Reads)
dim(reads)
head(reads)
head(reads,20)
idx <- rep(2:1000, by=4)
head(idx)
length(idx)
?seq
idx <- deq(from=2, to=999, by=4)
idx <- seq(from=2, to=999, by=4)
reads <- read.delim("~/Desktop/GS_head")
idx <- seq(from=2, to=999, by=4)
head(idx)
reads <- reads[idx,]
head(reads)
reads <- read.delim("~/Desktop/GS_head", header=FALSE)
reads$ID <- 1:1000
idx <- seq(from=2, to=1000, by=4)
reads <- reads[idx,]
head(reads)
idx2 <- grep("ACGTTGGATG", reads$V1)
length(idx2)
dim(reads)
nad <- reads[-idx2,]
head(reads)
reads
nad
nad$V1
for(i in nrow(nad)){#
	cat(paste(">", nad$ID, sep=" "),#
		nad$V1[i],#
		file="~/Desktop/GS_nad.txt", sep="/n", append=TRUE)#
}
head(nad)
nad$V1[1]
nad$ID
?cat
for(i in nrow(nad)){#
	cat(paste(">", nad$ID[i], sep=" "),#
		nad$V1[i],#
		file="~/Desktop/GS_nad.txt", sep="\n", append=TRUE)#
}
for(i in 1:nrow(nad)){#
	cat(paste(">", nad$ID[i], sep=" "),#
		nad$V1[i],#
		file="~/Desktop/GS_nad.txt", sep="\n", append=TRUE)#
}
nad$V1[1]
summary(nad$V1)
nad$V1 <- as.character(nad$V1)#
for(i in 1:nrow(nad)){#
	cat(paste(">", nad$ID[i], sep=" "),#
		nad$V1[i],#
		file="~/Desktop/GS_nad.txt", sep="\n", append=TRUE)#
}
dim(nad)
head(nad)
idx3 <- grep("CATCCAACGT", nad$V1)
length(idx3)
53/98
0.0151/(0.0151+.0881)
1.794/(1.794+0.408)
rep(2985:3034, each=12)
data.frame(Row=rep(2985:3034, each=12), dash=rep(1:12))
Function needs better documentation#
twitterchivePlots <- function (filename=NULL, term=NULL, mydate="2014-01-12") {#
    ## Load required packages#
    require(tm) #text mining applications within R#
    require(wordcloud)#
    require(RColorBrewer)#
    if (class(filename)!="character") stop("filename must be character")#
    if (!file.exists(filename)) stop(paste("File does not exist:", filename))#
    if(is.null(term)){#
    	searchTerm <- sub("\\.txt", "", basename(filename))#
    }else{#
    	searchTerm <- term;#
    }#
    message(paste("Filename:", filename))#
    message(paste("Search Term: ", searchTerm))#
    ## Read in the data and munge around the dates.#
    ## I can't promise the fixed widths will always work out for you.#
    message("Reading in data.")#
    trim.whitespace <- function(x) gsub("^\\s+|\\s+$", "", x) # Function to trim leading and trailing whitespace from character vectors.#
    d <- read.fwf(filename, widths=c(18, 14, 18, 1000), stringsAsFactors=FALSE, comment.char="")#
    d <- as.data.frame(sapply(d, trim.whitespace))#
    names(d) <- c("id", "datetime", "user", "text")#
    d$user <- sub("@", "", d$user)#
    ### transfer to Pacific time#
    d$datetime <- as.POSIXlt(d$datetime, format="%b %d %H:%M")#
    d$datetime <- as.POSIXct(d$datetime, tz="America/Los_Angeles", usetz=TRUE)#
    d$datetime <- as.POSIXlt(d$datetime, format="%b %d %H:%M")#
    d$date <- as.Date(d$datetime)#
    d$hour <- d$datetime$hour#
    d <- na.omit(d) # CRs cause a problem. explain this later.#
    head(d)#
    d$date <- as.character(d$date)#
    d <- subset(d, date %in% mydate)#
    message(paste("Total number of tweets:", nrow(d), sep=" "))#
    ## Number of tweets by hour#
    message("Plotting number of tweets by hour.")#
    byHour <- as.data.frame(table(d$hour))#
    names(byHour) <- c("hour", "tweets")#
    png(paste(searchTerm, mydate, "-by-hour.png", sep="--"), w=1000, h=700)#
    with(byHour, barplot(tweets, names.arg=hour, col="aquamarine4", las=1, cex.names=1.2, cex.axis=1.2, main=paste("Number of Tweets by Hour (Pacific time)", paste("Term:", searchTerm), paste("Date:", mydate), sep="\n")))#
    dev.off()#
    # ggplot(byHour) + geom_bar(aes(hour, tweets), stat="identity", fill="black") + theme_bw() + ggtitle("Number of Tweets by Hour")#
    ## Top Users#
    message("Plotting most prolific users.")#
    users <- as.data.frame(table(d$user))#
    message(paste("Total number of users:", nrow(users), sep=" "))#
    colnames(users) <- c("user", "tweets")#
    users <- users[order(users$tweets, decreasing=T), ]#
    users <- subset(users, user!=searchTerm)#
    allusers <- users#
    users <- subset(users, tweets >= 10)#
    png(paste(searchTerm, mydate, "barplot-top-users.png", sep="--"), w=1000, h=700)#
    par(mar=c(5,10,4,2))#
    with(users[order(users$tweets), ], barplot(tweets, names=user, horiz=T, col="aquamarine4", las=1, cex.names=1.2, cex.axis=1.2, main=paste("Most prolific users (tweets>=10)", paste("Term:", searchTerm), paste("Date:", mydate), sep="\n")))#
    dev.off()#
    png(paste(searchTerm, mydate, "userscloud.png", sep="--"), w=800, h=800)#
    allusers[1,]$tweets <- allusers[1,]$tweets - 100#
    allusers[2,]$tweets <- allusers[2,]$tweets - 70#
    wordcloud(allusers$user, allusers$tweets, scale = c(8, .5), min.freq = 1, max.words = 110, random.order = FALSE, rot.per = .15, colors = brewer.pal(8, "Dark2"))#
    mtext(paste(paste("Term:", searchTerm), paste("Date:", mydate), sep="; "), cex=1.5)#
    dev.off()#
    ## Word clouds#
    message("Plotting a wordcloud.")#
    words <- unlist(strsplit(as.character(d$text), " "))#
    words <- grep("^[A-Za-z0-9]+$", words, value=T)#
    words <- tolower(words)#
    words <- words[-grep("^[rm]t$", words)] # remove "RT"#
    words <- words[!(words %in% stopwords("en"))] # remove stop words#
    words <- words[!(words %in% c("mt", "rt", "via", "using", 1:9))] # remove RTs, MTs, via, and single digits.#
    wordstable <- as.data.frame(table(words))#
    wordstable <- wordstable[order(wordstable$Freq, decreasing=T), ]#
    wordstable <- wordstable[-1, ] # remove the hashtag you're searching for? need to functionalize this.#
    head(wordstable)#
    png(paste(searchTerm, mydate, "wordcloud.png", sep="--"), w=800, h=800)#
    wordcloud(wordstable$words, wordstable$Freq, scale = c(8, .2), min.freq = 3, max.words = 200, random.order = FALSE, rot.per = .15, colors = brewer.pal(8, "Dark2"))#
    mtext(paste(paste("Term:", searchTerm), paste("Date:", mydate), sep="; "), cex=1.5)#
    dev.off()#
    message(paste(searchTerm, ": All done!\n"))#
}
Modify this. This is where I keep this repo.#
repoDir <- ("~/Documents/workingSpace/TwitterAch/")#
#
### run the shell
setwd(repoDir)
system("sh tsearch.sh")
twitterchivePlots(filename="PAGXXII.txt", term=NULL, mydate="2014-01-14")
twitterchivePlots(filename="PAGXXII.txt", term=NULL, mydate="2014-01-15")
